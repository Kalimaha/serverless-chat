Parameters:
  S3BucketName:
    Type: String
  LambdaRoleName:
    Type: String
  DBName:
    Type: String

Resources:

  ServerlessChatDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DBName
      AttributeDefinitions:
        - AttributeName: PrimaryKey
          AttributeType: S
      KeySchema:
        - AttributeName: PrimaryKey
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  FunctionCreateMessage:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Create a chat message in the DB."
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: "CreateMessage.zip"
      FunctionName: "CreateMessage"
      Handler: "CreateMessage"
      MemorySize: 128
      Role: !GetAtt [ LambdaFunctionRole, Arn ]
      Runtime: "go1.x"

  FunctionRetrieveMessages:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Retrieve all messages from the DB."
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: "RetrieveMessages.zip"
      FunctionName: "RetrieveMessages"
      Handler: "RetrieveMessages"
      MemorySize: 128
      Role: !GetAtt [ LambdaFunctionRole, Arn ]
      Runtime: "go1.x"

  FunctionRegisterUser:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Register a chat user in the DB."
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: "RegisterUser.zip"
      FunctionName: "RegisterUser"
      Handler: "RegisterUser"
      MemorySize: 128
      Role: !GetAtt [ LambdaFunctionRole, Arn ]
      Runtime: "go1.x"

  WebsocketApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebsocketApiGateway
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  RouteForConnection:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApiGateway
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: RouteForConnection
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectionIntegration

  RouteForDisconnection:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApiGateway
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: RouteForDisconnection
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectionIntegration

  RouteForMessaging:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApiGateway
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: RouteForMessaging
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref MessagingIntegration

  ConnectionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FunctionRegisterUser
      Principal: apigateway.amazonaws.com

  MessagingPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApiGateway
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FunctionCreateMessage
      Principal: apigateway.amazonaws.com

  ConnectionIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApiGateway
      Description: Connection Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/${FunctionRegisterUser.Arn}/invocations

  DisconnectionIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApiGateway
      Description: Disconnection Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/${FunctionRegisterUser.Arn}/invocations

  MessagingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApiGateway
      Description: Messaging Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/${FunctionCreateMessage.Arn}/invocations

  MessagingResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      RouteId: !Ref RouteForMessaging
      ApiId: !Ref WebsocketApiGateway
      RouteResponseKey: $default

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - RouteForConnection
      - RouteForDisconnection
      - RouteForMessaging
    Properties:
      ApiId: !Ref WebsocketApiGateway

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: test
      Description: Test Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebsocketApiGateway

  WebsocketApiGatewayAccount:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt [ WebsocketApiGatewayCloudWatchRole, Arn ]

  WebsocketApiGatewayCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  WebsocketApiGatewayRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: apigateway.amazonaws.com
            Effect: Allow
      Policies:
        - PolicyName: Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "arn:aws:logs:*:*:*"
                Action:
                  - "logs:*"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "lambda:InvokeFunction"

  LambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
            Effect: Allow
      Policies:
        - PolicyName: Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "arn:aws:logs:*:*:*"
                Action:
                  - "logs:*"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "lambda:InvokeFunction"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "dynamodb:*"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "s3:*"
              - Effect: Allow
                Action:
                  - 'execute-api:ManageConnections'
                Resource:
                  - !Sub 'arn:aws:execute-api:ap-southeast-2:${AWS::AccountId}:${WebsocketApiGateway}/*'
              - Effect: Allow
                Resource: "*"
                Action:
                  - "execute-api:*"

Outputs:
  WebsocketApiGatewayARN:
    Description: The ARN required to connect to the gateway
    Value: !Ref WebsocketApiGateway